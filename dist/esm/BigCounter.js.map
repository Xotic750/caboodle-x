{"version":3,"sources":["../../src/BigCounter.js"],"names":["_defineProperties","_slice","_reverse","_join","floor","Math","BigCounter","TypeError","count","value","counterToString","_counterToString","prototype","get","next","clone","length","howMany","carry","index","zi","reset","toJSON","toString","valueOf"],"mappings":"AAAA;;;;;AAMA,OAAOA,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;IAEOC,K,GAASC,I,CAATD,K;AACP;;;;;;;;;;;;;;;;AAeA,eAAe,SAASE,UAAT,GAAsB;AACnC,MAAI,CAAC,IAAD,IAAS,EAAE,gBAAgBA,UAAlB,CAAb,EAA4C;AAC1C,UAAM,IAAIC,SAAJ,CAAc,uCAAd,CAAN;AACD;;AAEDP,EAAAA,iBAAiB,CAAC,IAAD,EAAO;AACtBQ,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,CAAC,CAAD;AADF;AADe,GAAP,CAAjB;AAKD;AAED;;;;;;;;AAOA,IAAMC,eAAe,GAAG,SAASC,gBAAT,GAA4B;AAClD,SAAOR,KAAK,CAACD,QAAQ,CAACD,MAAM,CAAC,KAAKO,KAAN,CAAP,CAAT,EAA+B,EAA/B,CAAZ;AACD,CAFD;;AAIAR,iBAAiB,CAACM,UAAU,CAACM,SAAZ,EAAuB;AACtC;;;;;;AAMAC,EAAAA,GAAG,EAAE;AACHJ,IAAAA,KAAK,EAAEC;AADJ,GAPiC;;AAUtC;;;;;;AAMAI,EAAAA,IAAI,EAAE;AACJL,IAAAA,KAAK,EAAE,SAASK,IAAT,GAAgB;AACrB,UAAMC,KAAK,GAAGd,MAAM,CAAC,KAAKO,KAAN,CAApB;;AACA,WAAKA,KAAL,CAAWQ,MAAX,GAAoB,CAApB;AACA,UAAMC,OAAO,GAAGF,KAAK,CAACC,MAAtB;AACA,UAAIE,KAAK,GAAG,CAAZ;AACA,UAAIC,KAAK,GAAG,CAAZ;;AACA,aAAOA,KAAK,GAAGF,OAAR,IAAmBC,KAA1B,EAAiC;AAC/B,YAAME,EAAE,GAAGF,KAAK,IAAIH,KAAK,CAACI,KAAD,CAAL,IAAgB,CAApB,CAAL,IAA+BA,KAAK,KAAK,CAAzC,CAAX;AACA,aAAKX,KAAL,CAAW,KAAKA,KAAL,CAAWQ,MAAtB,IAAgCI,EAAE,GAAG,EAArC;AACAF,QAAAA,KAAK,GAAGd,KAAK,CAACgB,EAAE,GAAG,EAAN,CAAb;AACAD,QAAAA,KAAK,IAAI,CAAT;AACD;;AAED,aAAO,IAAP;AACD;AAfG,GAhBgC;;AAiCtC;;;;;;AAMAE,EAAAA,KAAK,EAAE;AACLZ,IAAAA,KAAK,EAAE,SAASY,KAAT,GAAiB;AACtB,WAAKb,KAAL,CAAWQ,MAAX,GAAoB,CAApB;AACA,WAAKR,KAAL,CAAW,CAAX,IAAgB,CAAhB;AAEA,aAAO,IAAP;AACD;AANI,GAvC+B;;AA+CtC;;;;;;AAMAc,EAAAA,MAAM,EAAE;AACNb,IAAAA,KAAK,EAAEC;AADD,GArD8B;;AAwDtC;;;;;;AAMAa,EAAAA,QAAQ,EAAE;AACRd,IAAAA,KAAK,EAAEC;AADC,GA9D4B;;AAiEtC;;;;;;AAMAc,EAAAA,OAAO,EAAE;AACPf,IAAAA,KAAK,EAAEC;AADA;AAvE6B,CAAvB,CAAjB","sourcesContent":["/**\n * @file A big counter.\n * @copyright Copyright (c) 2018-present, Graham Fairweather\n * @module BigCounter\n */\n\nimport _defineProperties from './.internal/_defineProperties';\nimport _slice from './.internal/_slice';\nimport _reverse from './.internal/_reverse';\nimport _join from './.internal/_join';\n\nconst {floor} = Math;\n/**\n * Incremental integer counter. Counts from `0` to very big intergers.\n * Javascript´s number type allows you to count in integer steps\n * from `0` to `9007199254740991`. As of ES5, Strings can contain\n * approximately 65000 characters and ES6 is supposed to handle\n * the `MAX_SAFE_INTEGER` (though I don´t believe any environments supports\n * this). This counter represents integer values as strings and can therefore\n * count in integer steps from `0` to the maximum string length (that´s some\n * 65000 digits). In the lower range, upto `9007199254740991`, the strings can\n * be converted to safe Javascript integers `Number(value)` or `+value`. This\n * counter is great for any applications that need a really big count\n * represented as a string, (an ID string).\n *\n * @class\n */\nexport default function BigCounter() {\n  if (!this || !(this instanceof BigCounter)) {\n    throw new TypeError('Constructor BigCounter requires \"new\"');\n  }\n\n  _defineProperties(this, {\n    count: {\n      value: [0],\n    },\n  });\n}\n\n/**\n * Serialise the counter´s current value.\n *\n * @private\n * @this BigCounter\n * @returns {string} A string representation of an integer.\n */\nconst counterToString = function _counterToString() {\n  return _join(_reverse(_slice(this.count)), '');\n};\n\n_defineProperties(BigCounter.prototype, {\n  /**\n   * Gets the counter´s current value.\n   *\n   * @function\n   * @returns {string} A string representation of an integer.\n   */\n  get: {\n    value: counterToString,\n  },\n  /**\n   * Increments the counter´s value by `1`.\n   *\n   * @function\n   * @returns {object} The counter object.\n   */\n  next: {\n    value: function next() {\n      const clone = _slice(this.count);\n      this.count.length = 0;\n      const howMany = clone.length;\n      let carry = 0;\n      let index = 0;\n      while (index < howMany || carry) {\n        const zi = carry + (clone[index] || 0) + (index === 0);\n        this.count[this.count.length] = zi % 10;\n        carry = floor(zi / 10);\n        index += 1;\n      }\n\n      return this;\n    },\n  },\n  /**\n   * Resets the counter back to `0`.\n   *\n   * @function\n   * @returns {object} The counter object.\n   */\n  reset: {\n    value: function reset() {\n      this.count.length = 1;\n      this.count[0] = 0;\n\n      return this;\n    },\n  },\n  /**\n   * Gets the counter´s current value.\n   *\n   * @function\n   * @returns {string} A string representation of an integer.\n   */\n  toJSON: {\n    value: counterToString,\n  },\n  /**\n   * Gets the counter´s current value.\n   *\n   * @function\n   * @returns {string} A string representation of an integer.\n   */\n  toString: {\n    value: counterToString,\n  },\n  /**\n   * Gets the counter´s current value.\n   *\n   * @function\n   * @returns {string} A string representation of an integer.\n   */\n  valueOf: {\n    value: counterToString,\n  },\n});\n"],"file":"BigCounter.js"}