{"version":3,"sources":["../../src/Map.js"],"names":["_isArray","_defineProperty","_defineProperties","assertIsObjectLike","SYMBOL_ITERATOR","_occurs","base","MapIt","MapIterator","context","iteratorKind","value","writable","prototype","next","index","length","object","done","iterator","Map","TypeError","parseIterable","clear","delete","de1ete","key","entries","forEach","callback","thisArg","get","occurred","includes","has","keys","set","addSet","size","ReferenceError","values"],"mappings":"AAAA;;;;;AAMA,OAAOA,QAAP,MAAqB,sBAArB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,eAAP,MAA4B,kBAA5B;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAO,KAAKC,IAAZ,MAAsB,8BAAtB;AAEA;;;;;;;;;;;;;;AAaA,IAAMC,KAAK,GAAG,SAASC,WAAT,CAAqBC,OAArB,EAA8BC,YAA9B,EAA4C;AACxDR,EAAAA,iBAAiB,CAAC,IAAD,EAAO;AACtB,2BAAuB;AACrBS,MAAAA,KAAK,EAAE,IADc;AAErBC,MAAAA,QAAQ,EAAE;AAFW,KADD;AAKtB,eAAW;AACTD,MAAAA,KAAK,EAAER,kBAAkB,CAACM,OAAD;AADhB,KALW;AAQtB,4BAAwB;AACtBE,MAAAA,KAAK,EAAED;AADe,KARF;AAWtB,wBAAoB;AAClBC,MAAAA,KAAK,EAAE,CADW;AAElBC,MAAAA,QAAQ,EAAE;AAFQ;AAXE,GAAP,CAAjB;AAgBD,CAjBD;AAmBA;;;;;;;;;;AAQAX,eAAe,CAACM,KAAK,CAACM,SAAP,EAAkB,MAAlB,EAA0B;AACvCF,EAAAA,KAAK,EAAE,SAASG,IAAT,GAAgB;AACrB,QAAML,OAAO,GAAGN,kBAAkB,CAAC,KAAK,SAAL,CAAD,CAAlC;AAEAA,IAAAA,kBAAkB,CAACM,OAAD,CAAlB;AAEA,QAAMM,KAAK,GAAG,KAAK,kBAAL,CAAd;;AAEA,QAAI,KAAK,qBAAL,KAA+BA,KAAK,GAAGN,OAAO,CAAC,SAAD,CAAP,CAAmBO,MAA9D,EAAsE;AACpE,UAAMC,MAAM,GAAG;AAACC,QAAAA,IAAI,EAAE;AAAP,OAAf;AACA,UAAMR,YAAY,GAAG,KAAK,sBAAL,CAArB;AAEAO,MAAAA,MAAM,CAACN,KAAP,GACED,YAAY,KAAK,WAAjB,GACI,CAACD,OAAO,CAAC,SAAD,CAAP,CAAmBM,KAAnB,CAAD,EAA4BN,OAAO,CAAC,WAAD,CAAP,CAAqBM,KAArB,CAA5B,CADJ,GAEIN,OAAO,aAAMC,YAAN,QAAP,CAA+BK,KAA/B,CAHN;AAKA,WAAK,kBAAL,KAA4B,CAA5B;AAEA,aAAOE,MAAP;AACD;;AAED,SAAK,qBAAL,IAA8B,KAA9B;AAEA,WAAO;AACLC,MAAAA,IAAI,EAAE,IADD;AAELP,MAAAA,KAAK,EAAE,KAAK;AAFP,KAAP;AAID;AA5BsC,CAA1B,CAAf;AA+BA;;;;;;;;;AAOAV,eAAe,CAACM,KAAK,CAACM,SAAP,EAAkBT,eAAlB,EAAmC;AAChDO,EAAAA,KAAK,EAAE,SAASQ,QAAT,GAAoB;AACzB;AACA,WAAO,IAAP;AACD;AAJ+C,CAAnC,CAAf;AAOA;;;;;;;;;;;;AAUA,eAAe,SAASC,GAAT,GAA0B;AACvC,MAAI,CAAC,IAAD,IAAS,EAAE,gBAAgBA,GAAlB,CAAb,EAAqC;AACnC,UAAM,IAAIC,SAAJ,CAAc,gCAAd,CAAN;AACD;;AAEDf,EAAAA,IAAI,CAACgB,aAAL,CAAmB,KAAnB,EAA0B,IAA1B,EAAgC,UAASN,MAAT,sDAAgC,KAAK,CAArE;AACD;;AAEDf,eAAe,CAACmB,GAAD,EAAM,iBAAN,EAAyB;AACtCT,EAAAA,KAAK,EAAEP;AAD+B,CAAzB,CAAf;;AAIAF,iBAAiB,CACfkB,GAAG,CAACP,SADW;AAEf;AAA4B;AAC1B;;;;;AAKAU,EAAAA,KAAK,EAAE;AACLZ,IAAAA,KAAK,EAAE,SAASY,KAAT,GAAiB;AACtB,aAAOjB,IAAI,CAACiB,KAAL,CAAW,KAAX,EAAkB,IAAlB,CAAP;AACD;AAHI,GANmB;;AAW1B;;;;;;;AAOAC,EAAAA,MAAM,EAAE;AACNb,IAAAA,KAAK,EAAE,SAASc,MAAT,CAAgBC,GAAhB,EAAqB;AAC1B,aAAOpB,IAAI,CAACmB,MAAL,CAAY,KAAZ,EAAmB,IAAnB,EAAyBC,GAAzB,CAAP;AACD;AAHK,GAlBkB;;AAuB1B;;;;;;AAMAC,EAAAA,OAAO,EAAE;AACPhB,IAAAA,KAAK,EAAE,SAASgB,OAAT,GAAmB;AACxB,aAAO,IAAIpB,KAAJ,CAAU,IAAV,EAAgB,WAAhB,CAAP;AACD;AAHM,GA7BiB;;AAkC1B;;;;;;;;AAQAqB,EAAAA,OAAO,EAAE;AACPjB,IAAAA,KAAK,EAAE,SAASiB,OAAT,CAAiBC,QAAjB,EAAuC;AAAA,wCAATC,OAAS;AAATA,QAAAA,OAAS;AAAA;;AAC5C,aAAOxB,IAAI,CAACsB,OAAL,OAAAtB,IAAI,GAAS,KAAT,EAAgB,IAAhB,EAAsBuB,QAAtB,SAAmCC,OAAnC,EAAX;AACD;AAHM,GA1CiB;;AA+C1B;;;;;;;AAOAC,EAAAA,GAAG,EAAE;AACHpB,IAAAA,KAAK,EAAE,SAASoB,GAAT,CAAaL,GAAb,EAAkB;AACvB,UAAMM,QAAQ,GAAG3B,OAAO,CAACF,kBAAkB,CAAC,IAAD,CAAlB,CAAyB,SAAzB,CAAD,EAAsCuB,GAAtC,CAAxB;;AAEA,aAAOM,QAAQ,CAACC,QAAT,GAAoB,KAAK,WAAL,EAAkBD,QAAQ,CAACjB,KAA3B,CAApB,GAAwD,KAAK,CAApE;AACD;AALE,GAtDqB;;AA6D1B;;;;;;;;;AASAmB,EAAAA,GAAG,EAAE;AACHvB,IAAAA,KAAK,EAAEL,IAAI,CAAC4B;AADT,GAtEqB;;AAyE1B;;;;;;AAMAC,EAAAA,IAAI,EAAE;AACJxB,IAAAA,KAAK,EAAE,SAASwB,IAAT,GAAgB;AACrB,aAAO,IAAI5B,KAAJ,CAAU,IAAV,EAAgB,KAAhB,CAAP;AACD;AAHG,GA/EoB;;AAoF1B;;;;;;;;AAQA6B,EAAAA,GAAG,EAAE;AACHzB,IAAAA,KAAK,EAAE,SAASyB,GAAT,CAAaV,GAAb,EAAkBf,KAAlB,EAAyB;AAC9B,aAAOL,IAAI,CAAC+B,MAAL,CAAY,KAAZ,EAAmB,IAAnB,EAAyBX,GAAzB,EAA8Bf,KAA9B,CAAP;AACD;AAHE,GA5FqB;;AAiG1B;;;;;;;;AAQA2B,EAAAA,IAAI,EAAE;AACJP,IAAAA,GAAG,EAAE,SAASO,IAAT,GAAgB;AACnB,UAAI,CAAC,IAAD,IAAS,CAACtC,QAAQ,CAAC,KAAK,SAAL,CAAD,CAAlB,IAAuC,KAAK,UAAL,MAAqB,KAAhE,EAAuE;AACrE,cAAM,IAAIuC,cAAJ,CAAmB,0BAAnB,CAAN;AACD;;AAED,aAAO,KAAK,SAAL,EAAgBvB,MAAvB;AACD;AAPG,GAzGoB;;AAkH1B;;;;;;AAMAwB,EAAAA,MAAM,EAAE;AACN7B,IAAAA,KAAK,EAAE,SAAS6B,MAAT,GAAkB;AACvB,aAAO,IAAIjC,KAAJ,CAAU,IAAV,EAAgB,OAAhB,CAAP;AACD;AAHK;AAxHkB,CAFb,CAAjB;AAkIA;;;;;;;;;AAOAN,eAAe,CAACmB,GAAG,CAACP,SAAL,EAAgBT,eAAhB,EAAiC;AAC9CO,EAAAA,KAAK,EAAES,GAAG,CAACP,SAAJ,CAAcc;AADyB,CAAjC,CAAf","sourcesContent":["/**\n * @file ES6 Map.\n * @copyright Copyright (c) 2018-present, Graham Fairweather\n * @module Map\n */\n\nimport _isArray from './.internal/_isArray';\nimport _defineProperty from './.internal/_defineProperty';\nimport _defineProperties from './.internal/_defineProperties';\nimport assertIsObjectLike from './assertIsObjectLike';\nimport SYMBOL_ITERATOR from './symbolIterator';\nimport _occurs from './.internal/_occurs';\nimport * as base from './.internal/_collectionsBase';\n\n/**\n * An object is an iterator when it knows how to access items from a\n * collection one at a time, while keeping track of its current position\n * within that sequence. In JavaScript an iterator is an object that provides\n * a next() method which returns the next item in the sequence. This method\n * returns an object with two properties: Done and value. Once created,\n * an iterator object can be used explicitly by repeatedly calling next().\n *\n * @private\n * @class\n * @param {object} context - The Map object.\n * @param {string} iteratorKind - Values are `value`, `key` or `key+value`.\n */\nconst MapIt = function MapIterator(context, iteratorKind) {\n  _defineProperties(this, {\n    '[[IteratorHasMore]]': {\n      value: true,\n      writable: true,\n    },\n    '[[Map]]': {\n      value: assertIsObjectLike(context),\n    },\n    '[[MapIterationKind]]': {\n      value: iteratorKind,\n    },\n    '[[MapNextIndex]]': {\n      value: 0,\n      writable: true,\n    },\n  });\n};\n\n/**\n * Once initialized, the next() method can be called to access key-value\n * pairs from the object in turn.\n *\n * @private\n * @function next\n * @returns {object} Returns an object with two properties: done and value.\n */\n_defineProperty(MapIt.prototype, 'next', {\n  value: function next() {\n    const context = assertIsObjectLike(this['[[Map]]']);\n\n    assertIsObjectLike(context);\n\n    const index = this['[[MapNextIndex]]'];\n\n    if (this['[[IteratorHasMore]]'] && index < context['[[key]]'].length) {\n      const object = {done: false};\n      const iteratorKind = this['[[MapIterationKind]]'];\n\n      object.value =\n        iteratorKind === 'key+value'\n          ? [context['[[key]]'][index], context['[[value]]'][index]]\n          : context[`[[${iteratorKind}]]`][index];\n\n      this['[[MapNextIndex]]'] += 1;\n\n      return object;\n    }\n\n    this['[[IteratorHasMore]]'] = false;\n\n    return {\n      done: true,\n      value: void 0,\n    };\n  },\n});\n\n/**\n * The @@iterator property is the same Iterator object.\n *\n * @private\n * @function symIt\n * @returns {object} This Iterator object.\n */\n_defineProperty(MapIt.prototype, SYMBOL_ITERATOR, {\n  value: function iterator() {\n    /* istanbul ignore next */\n    return this;\n  },\n});\n\n/**\n * The Map object is a simple key/value map. Any value (both objects and\n * primitive values) may be used as either a key or a value.\n *\n * @class Map\n * @private\n * @param {*} [iterable] - Iterable is an Array or other iterable object whose\n *  elements are key-value pairs (2-element Arrays). Each key-value pair is\n *  added to the new Map, null is treated as undefined.\n */\nexport default function Map(...iterable) {\n  if (!this || !(this instanceof Map)) {\n    throw new TypeError(\"Constructor Map requires 'new'\");\n  }\n\n  base.parseIterable('map', this, iterable.length ? iterable[0] : void 0);\n}\n\n_defineProperty(Map, 'SYMBOL_ITERATOR', {\n  value: SYMBOL_ITERATOR,\n});\n\n_defineProperties(\n  Map.prototype,\n  /** @lends Map.prototype */ {\n    /**\n     * The clear() method removes all elements from a Map object.\n     *\n     * @returns {object} The Map object.\n     */\n    clear: {\n      value: function clear() {\n        return base.clear('map', this);\n      },\n    },\n    /**\n     * The delete() method removes the specified element from a Map object.\n     *\n     * @param {*} key - The key of the element to remove from the Map object.\n     * @returns {boolean} Returns true if an element in the Map object has been\n     *  removed successfully.\n     */\n    delete: {\n      value: function de1ete(key) {\n        return base.de1ete('map', this, key);\n      },\n    },\n    /**\n     * The entries() method returns a new Iterator object that contains the\n     * [key, value] pairs for each element in the Map object in insertion order.\n     *\n     * @returns {object} A new Iterator object.\n     */\n    entries: {\n      value: function entries() {\n        return new MapIt(this, 'key+value');\n      },\n    },\n    /**\n     * The forEach() method executes a provided function once per each\n     * key/value pair in the Map object, in insertion order.\n     *\n     * @param {Function} callback - Function to execute for each element..\n     * @param {*} [thisArg] - Value to use as this when executing callback.\n     * @returns {object} The Map object.\n     */\n    forEach: {\n      value: function forEach(callback, ...thisArg) {\n        return base.forEach('map', this, callback, ...thisArg);\n      },\n    },\n    /**\n     * The get() method returns a specified element from a Map object.\n     *\n     * @param {*} key - The key of the element to return from the Map object.\n     * @returns {*} Returns the element associated with the specified key or\n     *  undefined if the key can't be found in the Map object.\n     */\n    get: {\n      value: function get(key) {\n        const occurred = _occurs(assertIsObjectLike(this)['[[key]]'], key);\n\n        return occurred.includes ? this['[[value]]'][occurred.index] : void 0;\n      },\n    },\n    /**\n     * The has() method returns a boolean indicating whether an element with\n     * the specified key exists or not.\n     *\n     * @function\n     * @param {*} key - The key of the element to test for presence in the Map object.\n     * @returns {boolean} Returns true if an element with the specified key\n     *  exists in the Map object; otherwise false.\n     */\n    has: {\n      value: base.has,\n    },\n    /**\n     * The keys() method returns a new Iterator object that contains the keys\n     * for each element in the Map object in insertion order.\n     *\n     * @returns {object} A new Iterator object.\n     */\n    keys: {\n      value: function keys() {\n        return new MapIt(this, 'key');\n      },\n    },\n    /**\n     * The set() method adds a new element with a specified key and value to\n     * a Map object.\n     *\n     * @param {*} key - The key of the element to add to the Map object.\n     * @param {*} value - The value of the element to add to the Map object.\n     * @returns {object} The Map object.\n     */\n    set: {\n      value: function set(key, value) {\n        return base.addSet('map', this, key, value);\n      },\n    },\n    /**\n     * The value of size is an integer representing how many entries the Map\n     * object has.\n     *\n     * @name size\n     * @instance\n     * @type {number}\n     */\n    size: {\n      get: function size() {\n        if (!this || !_isArray(this['[[key]]']) || this['[[kind]]'] !== 'map') {\n          throw new ReferenceError('MapObject is not defined');\n        }\n\n        return this['[[key]]'].length;\n      },\n    },\n    /**\n     * The values() method returns a new Iterator object that contains the\n     * values for each element in the Map object in insertion order.\n     *\n     * @returns {object} A new Iterator object.\n     */\n    values: {\n      value: function values() {\n        return new MapIt(this, 'value');\n      },\n    },\n  },\n);\n\n/**\n * The initial value of the @@iterator property is the same function object\n * as the initial value of the entries property.\n *\n * @function symIt\n * @returns {object} A new Iterator object.\n */\n_defineProperty(Map.prototype, SYMBOL_ITERATOR, {\n  value: Map.prototype.entries,\n});\n"],"file":"Map.js"}