{"version":3,"sources":["../../src/Set.js"],"names":["_isArray","_defineProperty","_defineProperties","assertIsObjectLike","SYMBOL_ITERATOR","base","SetIt","SetIterator","context","iteratorKind","value","writable","prototype","next","index","length","object","done","iterator","setValuesIterator","values","Set","TypeError","parseIterable","add","addSet","clear","delete","de1ete","entries","forEach","callback","thisArg","has","keys","size","get","ReferenceError"],"mappings":"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","sourcesContent":["/**\n * @file ES6 Set.\n * @copyright Copyright (c) 2018-present, Graham Fairweather\n * @module Set\n */\n\nimport _isArray from './.internal/_isArray';\nimport _defineProperty from './.internal/_defineProperty';\nimport _defineProperties from './.internal/_defineProperties';\nimport assertIsObjectLike from './assertIsObjectLike';\nimport SYMBOL_ITERATOR from './symbolIterator';\nimport * as base from './.internal/_collectionsBase';\n\n/**\n * An object is an iterator when it knows how to access items from a\n * collection one at a time, while keeping track of its current position\n * within that sequence. In JavaScript an iterator is an object that provides\n * a next() method which returns the next item in the sequence. This method\n * returns an object with two properties: Done and value. Once created,\n * an iterator object can be used explicitly by repeatedly calling next().\n *\n * @private\n * @class\n * @param {object} context - The Set object.\n * @param {string} iteratorKind - Values are `value`, `key` or `key+value`.\n */\nconst SetIt = function SetIterator(context, iteratorKind) {\n  _defineProperties(this, {\n    '[[IteratorHasMore]]': {\n      value: true,\n      writable: true,\n    },\n    '[[Set]]': {\n      value: assertIsObjectLike(context),\n    },\n    '[[SetIterationKind]]': {\n      value: iteratorKind || 'value',\n    },\n    '[[SetNextIndex]]': {\n      value: 0,\n      writable: true,\n    },\n  });\n};\n\n/**\n * Once initialized, the next() method can be called to access key-value\n * pairs from the object in turn.\n *\n * @private\n * @function next\n * @returns {object} Returns an object with two properties: done and value.\n */\n_defineProperty(SetIt.prototype, 'next', {\n  value: function next() {\n    const context = assertIsObjectLike(this['[[Set]]']);\n    const index = this['[[SetNextIndex]]'];\n\n    if (this['[[IteratorHasMore]]'] && index < context['[[key]]'].length) {\n      const object = {done: false};\n      const value = context['[[key]]'][index];\n\n      object.value = this['[[SetIterationKind]]'] === 'key+value' ? [value, value] : value;\n      this['[[SetNextIndex]]'] += 1;\n\n      return object;\n    }\n\n    this['[[IteratorHasMore]]'] = false;\n\n    return {\n      done: true,\n      value: void 0,\n    };\n  },\n});\n\n/**\n * The @@iterator property is the same Iterator object.\n *\n * @private\n * @function symIt\n * @returns {object} This Iterator object.\n */\n_defineProperty(SetIt.prototype, SYMBOL_ITERATOR, {\n  value: function iterator() {\n    /* istanbul ignore next */\n    return this;\n  },\n});\n\n/**\n * This method returns a new Iterator object that contains the\n * values for each element in the Set object in insertion order.\n *\n * @private\n * @this Set\n * @returns {object} A new Iterator object.\n */\nconst setValuesIterator = function values() {\n  return new SetIt(this);\n};\n\n/**\n * The Set object lets you store unique values of any type, whether primitive\n * values or object references.\n *\n * @class Set\n * @private\n * @param {*} [iterable] - If an iterable object is passed, all of its elements\n * will be added to the new Set, null is treated as undefined.\n */\nexport default function Set(...iterable) {\n  if (!this || !(this instanceof Set)) {\n    throw new TypeError(\"Constructor Set requires 'new'\");\n  }\n\n  base.parseIterable('set', this, iterable.length ? iterable[0] : void 0);\n}\n\n_defineProperty(Set, 'SYMBOL_ITERATOR', {\n  value: SYMBOL_ITERATOR,\n});\n\n_defineProperties(\n  Set.prototype,\n  /** @lends Set.prototype */ {\n    /**\n     * The add() method appends a new element with a specified value to the end\n     * of a Set object.\n     *\n     * @param {*} value - Required. The value of the element to add to the Set\n     *  object.\n     * @returns {object} The Set object.\n     */\n    add: {\n      value: function add(value) {\n        return base.addSet('set', this, value);\n      },\n    },\n    /**\n     * The clear() method removes all elements from a Set object.\n     *\n     * @returns {object} The Set object.\n     */\n    clear: {\n      value: function clear() {\n        return base.clear('set', this);\n      },\n    },\n    /**\n     * The delete() method removes the specified element from a Set object.\n     *\n     * @param {*} value - The value of the element to remove from the Set object.\n     * @returns {boolean} Returns true if an element in the Set object has been\n     *  removed successfully; otherwise false.\n     */\n    delete: {\n      value: function de1ete(value) {\n        return base.de1ete('set', this, value);\n      },\n    },\n    /**\n     * The entries() method returns a new Iterator object that contains an\n     * array of [value, value] for each element in the Set object, in\n     * insertion order. For Set objects there is no key like in Map objects.\n     * However, to keep the API similar to the Map object, each entry has the\n     * same value for its key and value here, so that an array [value, value]\n     * is returned.\n     *\n     * @function\n     * @returns {object} A new Iterator object.\n     */\n    entries: {\n      value: function entries() {\n        return new SetIt(this, 'key+value');\n      },\n    },\n    /**\n     * The forEach() method executes a provided function once per each value\n     * in the Set object, in insertion order.\n     *\n     * @param {Function} callback - Function to execute for each element.\n     * @param {*} [thisArg] - Value to use as this when executing callback.\n     * @returns {object} The Set object.\n     */\n    forEach: {\n      value: function forEach(callback, ...thisArg) {\n        return base.forEach('set', this, callback, ...thisArg);\n      },\n    },\n    /**\n     * The has() method returns a boolean indicating whether an element with the\n     * specified value exists in a Set object or not.\n     *\n     * @function\n     * @param {*} value - The value to test for presence in the Set object.\n     * @returns {boolean} Returns true if an element with the specified value\n     *  exists in the Set object; otherwise false.\n     */\n    has: {\n      value: base.has,\n    },\n    /**\n     * The keys() method is an alias for the `values` method (for similarity\n     * with Map objects), it behaves exactly the same and returns values of Set elements.\n     *\n     * @function\n     * @returns {object} A new Iterator object.\n     */\n    keys: {\n      value: setValuesIterator,\n    },\n    /**\n     * The value of size is an integer representing how many entries the Set\n     * object has.\n     *\n     * @name size\n     * @instance\n     * @type {number}\n     */\n    size: {\n      get: function size() {\n        if (!this || !_isArray(this['[[key]]']) || this['[[kind]]'] !== 'set') {\n          throw new ReferenceError('SetObject is not defined');\n        }\n\n        return this['[[key]]'].length;\n      },\n    },\n    /**\n     * The values() method returns a new Iterator object that contains the\n     * values for each element in the Set object in insertion order.\n     *\n     * @function\n     * @returns {object} A new Iterator object.\n     */\n    values: {\n      value: setValuesIterator,\n    },\n  },\n);\n\n/**\n * The initial value of the @@iterator property is the same function object\n * as the initial value of the values property.\n *\n * @function symIt\n * @returns {object} A new Iterator object.\n */\n_defineProperty(Set.prototype, SYMBOL_ITERATOR, {\n  value: setValuesIterator,\n});\n"],"file":"Set.js"}