{"version":3,"sources":["../../src/castArray.js"],"names":["_isArray","args","length","identity"],"mappings":";;;;AAAA;;;;;AAMA,OAAOA,QAAP,MAAqB,sBAArB;AAEA;;;;;;;;;;AASA,gBAAe,YAAa;AAAA;;AAAA,oCAATC,IAAS;AAATA,IAAAA,IAAS;AAAA;;AAC1B,MAAI,CAACA,IAAI,CAACC,MAAV,EAAkB;AAChB,WAAO,EAAP;AACD;;AAHyB,MAKnBC,QALmB,GAKPF,IALO;AAO1B,SAAOD,QAAQ,CAACG,QAAD,CAAR,GAAqBA,QAArB,GAAgC,CAACA,QAAD,CAAvC;AACD,CARD","sourcesContent":["/**\n * @file Utility that clamps a number to min and max limits inclusive.\n * @copyright Copyright (c) 2018-present, Graham Fairweather\n * @module castArray\n */\n\nimport _isArray from './.internal/_isArray';\n\n/**\n * Takes a single, optional argument and then performs the following logic:\n * If an argument is supplied and is an array then it will be returned unchanged,\n * if an argument is supplied and is not an array then it will be wrapped in a new array and returned,\n * if no argument is supplied then a new empty array is returned.\n *\n * @param {Array|*} [args] - A single optional identity argument.\n * @returns {Array} An array as described the the description logic.\n */\nexport default (...args) => {\n  if (!args.length) {\n    return [];\n  }\n\n  const [identity] = args;\n\n  return _isArray(identity) ? identity : [identity];\n};\n"],"file":"castArray.js"}