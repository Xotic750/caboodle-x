{"version":3,"sources":["../../src/getFunctionName.js"],"names":["_match","_functionToString","_isFunction","normalizeSpace","replaceComments","ANONYMOUS","test1","getName","name","createsAnonymous","Function","_getName","fn","reName","match","ignore","getFunctionName"],"mappings":"AAAA;;;;;AAMA,OAAOA,MAAP,MAAmB,oBAAnB;AACA,OAAOC,iBAAP,MAA8B,+BAA9B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,IAAMC,SAAS,GAAG,WAAlB;;AAEA,SAASC,KAAT,GAAiB,CAAE;;AAEnB,IAAIC,OAAJ;;AAEA,IAAID,KAAK,CAACE,IAAN,KAAe,OAAnB,EAA4B;AAC1B;AACA,MAAMC,gBAAgB,GAAGC,QAAQ,GAAGF,IAAX,KAAoBH,SAA7C;;AAEA,MAAII,gBAAJ,EAAsB;AACpBF,IAAAA,OAAO,GAAG,SAASI,QAAT,CAAkBC,EAAlB,EAAsB;AAC9B,aAAOA,EAAE,CAACJ,IAAH,KAAYH,SAAZ,GAAwB,EAAxB,GAA6BO,EAAE,CAACJ,IAAvC;AACD,KAFD;AAGD,GAJD,MAIO;AACLD,IAAAA,OAAO,GAAG,SAASI,QAAT,CAAkBC,EAAlB,EAAsB;AAC9B,aAAOA,EAAE,CAACJ,IAAV;AACD,KAFD;AAGD;AACF,CAbD,MAaO;AACL,MAAMK,MAAM,GAAG,mDAAf;;AACAN,EAAAA,OAAO,GAAG,SAASI,QAAT,CAAkBC,EAAlB,EAAsB;AAC9B,QAAIE,KAAJ;;AACA,QAAI;AACFA,MAAAA,KAAK,GAAGd,MAAM,CAACG,cAAc,CAACC,eAAe,CAACH,iBAAiB,CAACW,EAAD,CAAlB,EAAwB,GAAxB,CAAhB,CAAf,EAA8DC,MAA9D,CAAd;;AAEA,UAAIC,KAAJ,EAAW;AACT,YAAMN,IAAI,GAAGM,KAAK,CAAC,CAAD,CAAlB;AAEA,eAAON,IAAI,KAAKH,SAAT,GAAqB,EAArB,GAA0BG,IAAjC;AACD;AACF,KARD,CAQE,OAAOO,MAAP,EAAe;AACf;AACD;;AAED,WAAO,EAAP;AACD,GAfD;AAgBD;AAED;;;;;;;;;;AAQA,eAAe,SAASC,eAAT,CAAyBJ,EAAzB,EAA6B;AAC1C;AACA,SAAOV,WAAW,CAACU,EAAD,EAAK,IAAL,CAAX,GAAwBL,OAAO,CAACK,EAAD,CAA/B,GAAsC,KAAK,CAAlD;AACD","sourcesContent":["/**\n * @file Get the name of the function.\n * @copyright Copyright (c) 2018-present, Graham Fairweather\n * @module getFunctionName\n */\n\nimport _match from './.internal/_match';\nimport _functionToString from './.internal/_functionToString';\nimport _isFunction from './.internal/_isFunction';\nimport normalizeSpace from './normalizeSpace';\nimport replaceComments from './replaceComments';\n\nconst ANONYMOUS = 'anonymous';\n\nfunction test1() {}\n\nlet getName;\n\nif (test1.name === 'test1') {\n  /* eslint-disable-next-line no-new-func */\n  const createsAnonymous = Function().name === ANONYMOUS;\n\n  if (createsAnonymous) {\n    getName = function _getName(fn) {\n      return fn.name === ANONYMOUS ? '' : fn.name;\n    };\n  } else {\n    getName = function _getName(fn) {\n      return fn.name;\n    };\n  }\n} else {\n  const reName = /^(?:async )?(?:function|class) ?(?:\\* )?([\\w$]+)/i;\n  getName = function _getName(fn) {\n    let match;\n    try {\n      match = _match(normalizeSpace(replaceComments(_functionToString(fn), ' ')), reName);\n\n      if (match) {\n        const name = match[1];\n\n        return name === ANONYMOUS ? '' : name;\n      }\n    } catch (ignore) {\n      /* ignore */\n    }\n\n    return '';\n  };\n}\n\n/**\n * This method returns the name of the function, or `undefined` if not\n * a function.\n *\n * @param {Function} fn - The function to get the name of.\n * @returns {undefined|string} The name of the function,  or `undefined` if\n *  not a function.\n */\nexport default function getFunctionName(fn) {\n  /* eslint-disable-next-line no-void */\n  return _isFunction(fn, true) ? getName(fn) : void 0;\n}\n"],"file":"getFunctionName.js"}