{"version":3,"sources":["../../src/intersection.js"],"names":["_sift","_accumulate","_any","_includes","isNil","_shift","_push","requireObjectCoercible","isNotNil","_isNotNil","value","intersection","arrays","remaining","length","acc","isExcluded","array"],"mappings":";;AAAA;;;;;AAMA,OAAOA,KAAP,MAAkB,mBAAlB;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;;AAEA,IAAMC,QAAQ,GAAG,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AACzC,SAAO,CAACN,KAAK,CAACM,KAAD,CAAb;AACD,CAFD;AAIA;;;;;;;;;;AAQA,eAAe,SAASC,YAAT,GAAiC;AAAA;;AAAA,oCAARC,MAAQ;AAARA,IAAAA,MAAQ;AAAA;;AAC9C,MAAMC,SAAS,GAAGb,KAAK,CAACO,sBAAsB,CAACK,MAAD,CAAvB,EAAiCJ,QAAjC,CAAvB;;AAEA,MAAIK,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,WAAO,EAAP;AACD;;AAED,SAAOb,WAAW,CAChBI,MAAM,CAACQ,SAAD,CADU,EAEhB,UAACE,GAAD,EAAML,KAAN,EAAgB;AAAA;;AAAA;;AACd,QAAMM,UAAU,GAAG,CAACd,IAAI,CAACW,SAAD,EAAY,UAACI,KAAD;AAAA;;AAAA,aAAW,CAACd,SAAS,CAACI,sBAAsB,CAACU,KAAD,CAAvB,EAAgCP,KAAhC,CAArB;AAAA,KAAZ,YAAxB;;AAEA,QAAIM,UAAU,IAAI,CAACb,SAAS,CAACY,GAAD,EAAML,KAAN,CAA5B,EAA0C;AACxCJ,MAAAA,KAAK,CAACS,GAAD,EAAML,KAAN,CAAL;AACD;;AAED,WAAOK,GAAP;AACD,GAVe,aAWhB,EAXgB,CAAlB;AAaD","sourcesContent":["/**\n * @file Creates an array of unique values that are included in all given arrays.\n * @copyright Copyright (c) 2018-present, Graham Fairweather\n * @module intersection\n */\n\nimport _sift from './.internal/_sift';\nimport _accumulate from './.internal/_accumulate';\nimport _any from './.internal/_any';\nimport _includes from './.internal/_includes';\nimport isNil from './isNil';\nimport _shift from './.internal/_shift';\nimport _push from './.internal/_push';\nimport requireObjectCoercible from './requireObjectCoercible';\n\nconst isNotNil = function _isNotNil(value) {\n  return !isNil(value);\n};\n\n/**\n * This method creates an array of unique values that are included in all given\n * arrays using SameValueZero for equality comparisons. The order and references\n * of result values are determined by the first array.\n *\n * @param {...Array} [arrays] - The arrays to inspect.\n * @returns {Array} Returns the new array of intersecting values.\n */\nexport default function intersection(...arrays) {\n  const remaining = _sift(requireObjectCoercible(arrays), isNotNil);\n\n  if (remaining.length < 1) {\n    return [];\n  }\n\n  return _accumulate(\n    _shift(remaining),\n    (acc, value) => {\n      const isExcluded = !_any(remaining, (array) => !_includes(requireObjectCoercible(array), value));\n\n      if (isExcluded && !_includes(acc, value)) {\n        _push(acc, value);\n      }\n\n      return acc;\n    },\n    [],\n  );\n}\n"],"file":"intersection.js"}