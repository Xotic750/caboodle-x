{"version":3,"sources":["../../src/modulo.js"],"names":["floor","Math","modulo","dividend","divisor","remain"],"mappings":"AAAA;;;;;IAMOA,K,GAASC,I,CAATD,K;AAEP;;;;;;;;;;;;;;;;;AAgBA,eAAe,SAASE,MAAT,CAAgBC,QAAhB,EAA0BC,OAA1B,EAAmC;AAChD,MAAMC,MAAM,GAAGF,QAAQ,GAAGC,OAA1B;AAEA,SAAOJ,KAAK,CAACK,MAAM,IAAI,CAAV,GAAcA,MAAd,GAAuBA,MAAM,GAAGD,OAAjC,CAAZ;AACD","sourcesContent":["/**\n * @file Modulo - floored division implementation.\n * @copyright Copyright (c) 2018-present, Graham Fairweather\n * @module toStringTag\n */\n\nconst {floor} = Math;\n\n/**\n * The notation “x modulo y” (y must be finite and nonzero) computes a value k\n * of the same sign as y (or zero) such that abs(k) < abs(y) and x-k = q × y\n * for some integer q.\n *\n * Donald Knuth described floored division where the quotient is defined by\n * the floor function q = ⌊a/n⌋ and thus according to equation the remainder\n * would have the same sign as the divisor. Due to the floor function, the\n * quotient is always rounded downwards, even if it is already negative.\n *\n * @param {number} dividend - The integer to find the remainder of.\n * @param {number} divisor - The integer to divide by.\n * @returns {number} The integer remainder.\n * @see http://www.ecma-international.org/ecma-262/6.0/#sec-algorithm-conventions\n * @see https://en.wikipedia.org/wiki/Modulo_operation\n */\nexport default function modulo(dividend, divisor) {\n  const remain = dividend % divisor;\n\n  return floor(remain >= 0 ? remain : remain + divisor);\n}\n"],"file":"modulo.js"}