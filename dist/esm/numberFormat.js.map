{"version":3,"sources":["../../src/numberFormat.js"],"names":["_RegExp","_toFixed","_numberToString","_replace","_split","_stringSlice","_join","_isFinite","_toNumber","_toInteger","clamp","_toString","numberToDecimalString","isNil","numberFormat","value","number","digits","fixed","parts","sectionLength","sectionDelimiter","decimalDelimiter"],"mappings":"AAAA;;;;;AAMA,OAAOA,OAAP,MAAoB,qBAApB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA;;;;;;;;;;;;;;;AAcA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAAsC;AACnD,MAAMC,MAAM,GAAGR,SAAS,CAACO,KAAD,CAAxB;;AAEA,MAAI,CAACR,SAAS,CAACS,MAAD,CAAd,EAAwB;AACtB,WAAOd,eAAe,CAACc,MAAD,CAAtB;AACD,GALkD,CAOnD;;;AACA,MAAMC,MAAM,GAAG,qDAAc,CAAd,IAAmB,CAACJ,KAAK,kDAAzB,GAAqCH,KAAK,CAACD,UAAU,kDAAX,EAAsB,CAAtB,EAAyB,EAAzB,CAA1C,GAAyE,CAAxF,CARmD,CASnD;;AACA,MAAIS,KAAK,GAAGN,qBAAqB,CAACX,QAAQ,CAACe,MAAD,EAASC,MAAT,CAAT,CAAjC;;AAEA,MAAIA,MAAM,GAAG,CAAb,EAAgB;AACd,QAAME,KAAK,GAAGf,MAAM,CAACc,KAAD,EAAQ,GAAR,CAApB;;AACAC,IAAAA,KAAK,CAAC,CAAD,CAAL,GAAWd,YAAY,WAAIc,KAAK,CAAC,CAAD,CAAL,IAAY,EAAhB,2BAA0C,CAA1C,EAA6CF,MAA7C,CAAvB;AACAC,IAAAA,KAAK,GAAGZ,KAAK,CAACa,KAAD,EAAQ,GAAR,CAAb;AACD;;AAED,MAAMC,aAAa,GAAG,qDAAc,CAAd,IAAmB,CAACP,KAAK,kDAAzB,GAAqCJ,UAAU,kDAA/C,GAA2D,CAAjF,CAlBmD,CAmBnD;;AACA,MAAMY,gBAAgB,GAAG,qDAAc,CAAd,IAAmB,CAACR,KAAK,kDAAzB,GAAqCF,SAAS,kDAA9C,GAA0D,GAAnF;AACA,MAAMW,gBAAgB,GAAG,qDAAc,CAAd,IAAmB,CAACT,KAAK,kDAAzB,GAAqCF,SAAS,kDAA9C,GAA0D,GAAnF;AAEA,SAAOR,QAAQ,CACbmB,gBAAgB,KAAK,GAArB,GAA2BJ,KAA3B,GAAmCf,QAAQ,CAACe,KAAD,EAAQ,GAAR,EAAaI,gBAAb,CAD9B,EAEb,IAAItB,OAAJ,sBAA0BoB,aAA1B,gBAA6CH,MAAM,GAAG,CAAT,GAAa,KAAb,GAAqB,GAAlE,QAA0E,GAA1E,CAFa,cAGRI,gBAHQ,EAAf;AAKD","sourcesContent":["/**\n * @file Format a number.\n * @copyright Copyright (c) 2018-present, Graham Fairweather\n * @module numberFormat\n */\n\nimport _RegExp from './.internal/_RegExp';\nimport _toFixed from './.internal/_toFixed';\nimport _numberToString from './.internal/_numberToString';\nimport _replace from './.internal/_replace';\nimport _split from './.internal/_split';\nimport _stringSlice from './.internal/_stringSlice';\nimport _join from './.internal/_join';\nimport _isFinite from './.internal/_isFinite';\nimport _toNumber from './.internal/_toNumber';\nimport _toInteger from './.internal/_toInteger';\nimport clamp from './clamp';\nimport _toString from './.internal/_toString';\nimport numberToDecimalString from './numberToDecimalString';\nimport isNil from './isNil';\n\n/**\n * Format a given number using fixed-point notation, with user specified digit\n * counts and separators. `null` or 'undefined' can be used for optional\n * arguments to denote that the default value is to be used.\n *\n * @param {number} value - The numerical value to be formatted.\n * @param {Array} [rest] - The remaining arguments array.\n * @param {number} [rest.digits=2] - The number of digits to appear after the\n *  decimal point; this may be a value between 0 and 20, inclusive.\n * @param {number} [rest.sectionLength=3] - Length of integer part sections.\n * @param {string} [rest.sectionDelimiter=,] - Integer part section delimiter.\n * @param {string} [rest.decimalDelimiter=.] - Decimal delimiter.\n * @returns {string} The numerical value with the chosen formatting.\n */\nexport default function numberFormat(value, ...rest) {\n  const number = _toNumber(value);\n\n  if (!_isFinite(number)) {\n    return _numberToString(number);\n  }\n\n  // 'digits' must be >= 0 or <= 20 otherwise a RangeError is thrown by Number#_toFixed.\n  const digits = rest.length > 0 && !isNil(rest[0]) ? clamp(_toInteger(rest[0]), 0, 20) : 2;\n  // Formats a number using fixed-point notation.\n  let fixed = numberToDecimalString(_toFixed(number, digits));\n\n  if (digits > 0) {\n    const parts = _split(fixed, '.');\n    parts[1] = _stringSlice(`${parts[1] || ''}00000000000000000000`, 0, digits);\n    fixed = _join(parts, '.');\n  }\n\n  const sectionLength = rest.length > 1 && !isNil(rest[1]) ? _toInteger(rest[1]) : 3;\n  // Formats a number (string) of fixed-point notation, with user delimiters.\n  const sectionDelimiter = rest.length > 2 && !isNil(rest[2]) ? _toString(rest[2]) : ',';\n  const decimalDelimiter = rest.length > 3 && !isNil(rest[3]) ? _toString(rest[3]) : '.';\n\n  return _replace(\n    decimalDelimiter === '.' ? fixed : _replace(fixed, '.', decimalDelimiter),\n    new _RegExp(`\\\\d(?=(\\\\d{${sectionLength}})+${digits > 0 ? '\\\\D' : '$'})`, 'g'),\n    `$&${sectionDelimiter}`,\n  );\n}\n"],"file":"numberFormat.js"}