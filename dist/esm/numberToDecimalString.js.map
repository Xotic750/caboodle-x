{"version":3,"sources":["../../src/numberToDecimalString.js"],"names":["_Number","_charAt","_stringSlice","_replace","_stringIndexOf","_join","_search","_test","_toString","EMPTY_STRING","DECIMAL_MARK","HYPHEN_MINUS","ZERO_SYMBOL","MINUS_ZERO_SYMBOL","ERROR_MSG","validPattern","expPattern","toDecimalFormString","value","workingValue","TypeError","sign","pointIndex","exponentIndex","index","length","leadingZeroIndex","coefficient","exponent","position","decimalForm","decimalFormLength"],"mappings":"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","sourcesContent":["/**\n * @file Convert a base-10 or scientific E-notation value to a decimal form string.\n * @copyright Copyright (c) 2018-present, Graham Fairweather\n * @module numberToDecimalString\n */\n\nimport _Number from './.internal/_Number';\nimport _charAt from './.internal/_charAt';\nimport _stringSlice from './.internal/_stringSlice';\nimport _replace from './.internal/_replace';\nimport _stringIndexOf from './.internal/_stringIndexOf';\nimport _join from './.internal/_join';\nimport _search from './.internal/_search';\nimport _test from './.internal/_test';\nimport _toString from './.internal/_toString';\n\nconst EMPTY_STRING = '';\nconst DECIMAL_MARK = '.';\nconst HYPHEN_MINUS = '-';\nconst ZERO_SYMBOL = '0';\nconst MINUS_ZERO_SYMBOL = HYPHEN_MINUS + ZERO_SYMBOL;\nconst ERROR_MSG = 'not a valid base 10 numeric value';\nconst validPattern = /^-?(?:(?:\\d|[1-9]\\d*)(?:\\.\\d+)?)(?:e[+-]?\\d+)?$/i;\nconst expPattern = /e/i;\n\n/**\n * This method converts a base-10 or scientific E-notation value to\n * a decimal form string. Javascript's IEE 754 double-precision numbers\n * give the same precision as `number.toString()`.\n *\n * @param {number|string} value - The value to be converted.\n * @throws {TypeError} If value is not a valid format.\n * @throws {TypeError} If value is a Symbol or not coercible.\n * @returns {string} The value converted to a decimal form string.\n */\nexport default function toDecimalFormString(value) {\n  let workingValue = value;\n\n  // Minus zero?\n  if (workingValue === 0 && 1 / workingValue < 0) {\n    workingValue = MINUS_ZERO_SYMBOL;\n  } else {\n    workingValue = _toString(workingValue);\n\n    if (!_test(validPattern, workingValue)) {\n      throw new TypeError(ERROR_MSG);\n    }\n  }\n\n  // Determine sign.\n  let sign;\n\n  if (_charAt(workingValue, 0) === HYPHEN_MINUS) {\n    workingValue = _stringSlice(workingValue, 1);\n    sign = -1;\n  } else {\n    sign = 1;\n  }\n\n  // Decimal point?\n  const pointIndex = _stringIndexOf(workingValue, DECIMAL_MARK);\n\n  if (pointIndex > -1) {\n    workingValue = _replace(workingValue, DECIMAL_MARK, EMPTY_STRING);\n  }\n\n  let exponentIndex = pointIndex;\n  // Exponential form?\n  let index = _search(workingValue, expPattern);\n\n  if (index > 0) {\n    // Determine exponent.\n    if (exponentIndex < 0) {\n      exponentIndex = index;\n    }\n\n    exponentIndex += _Number(_stringSlice(workingValue, index + 1));\n    workingValue = _stringSlice(workingValue, 0, index);\n  } else if (exponentIndex < 0) {\n    // Integer.\n    exponentIndex = workingValue.length;\n  }\n\n  let leadingZeroIndex = workingValue.length;\n  // Determine leading zeros.\n  index = 0;\n  while (index < leadingZeroIndex && _charAt(workingValue, index) === ZERO_SYMBOL) {\n    index += 1;\n  }\n\n  let coefficient;\n  let exponent;\n\n  if (index === leadingZeroIndex) {\n    // Zero.\n    exponent = 0;\n    coefficient = [0];\n  } else {\n    // Determine trailing zeros.\n    if (leadingZeroIndex > 0) {\n      do {\n        leadingZeroIndex -= 1;\n      } while (_charAt(workingValue, leadingZeroIndex) === ZERO_SYMBOL && leadingZeroIndex > 0);\n    }\n\n    exponent = exponentIndex - index - 1;\n    coefficient = [];\n    coefficient.length = leadingZeroIndex + 1;\n\n    // Convert string to array of digits without leading/trailing zeros.\n    let position = 0;\n    while (index <= leadingZeroIndex) {\n      coefficient[position] = _Number(_charAt(workingValue, index));\n      position += 1;\n      index += 1;\n    }\n  }\n\n  let decimalForm = _join(coefficient, EMPTY_STRING);\n  const decimalFormLength = decimalForm.length;\n\n  if (exponent < 0) {\n    exponent += 1;\n    while (exponent) {\n      decimalForm = ZERO_SYMBOL + decimalForm;\n      exponent += 1;\n    }\n\n    decimalForm = ZERO_SYMBOL + DECIMAL_MARK + decimalForm;\n  } else if (exponent > 0) {\n    exponent += 1;\n\n    if (exponent > decimalFormLength) {\n      exponent -= decimalFormLength;\n      while (exponent) {\n        decimalForm += ZERO_SYMBOL;\n        exponent -= 1;\n      }\n    } else if (exponent < decimalFormLength) {\n      decimalForm = _stringSlice(decimalForm, 0, exponent) + DECIMAL_MARK + _stringSlice(decimalForm, exponent);\n    }\n\n    // Exponent is zero.\n  } else if (decimalFormLength > 1) {\n    decimalForm = _charAt(decimalForm, 0) + DECIMAL_MARK + _stringSlice(decimalForm, 1);\n  }\n\n  return sign < 0 ? HYPHEN_MINUS + decimalForm : decimalForm;\n}\n"],"file":"numberToDecimalString.js"}