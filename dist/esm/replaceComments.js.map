{"version":3,"sources":["../../src/replaceComments.js"],"names":["_toString","_replace","requireCoercibleToString","STRIP_COMMENTS","replaceComments","string"],"mappings":"AAAA;;;;;AAMA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,QAAP,MAAqB,sBAArB;AACA,OAAOC,wBAAP,MAAqC,4BAArC;AAEA,IAAMC,cAAc,GAAG,kCAAvB;AAEA;;;;;;;;;;AASA,eAAe,SAASC,eAAT,CAAyBC,MAAzB,EAAiD;AAC9D,SAAOJ,QAAQ,CAACC,wBAAwB,CAACG,MAAD,CAAzB,EAAmCF,cAAnC,EAAmD,qDAAqBH,SAAS,kDAA9B,GAAiD,EAApG,CAAf;AACD","sourcesContent":["/**\n * @file Replace the comments in a string.\n * @copyright Copyright (c) 2018-present, Graham Fairweather\n * @module replaceComments\n */\n\nimport _toString from './.internal/_toString';\nimport _replace from './.internal/_replace';\nimport requireCoercibleToString from './requireCoercibleToString';\n\nconst STRIP_COMMENTS = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\n\n/**\n * This method replaces comments in a string.\n *\n * @param {string} string - The string to be stripped.\n * @param {string} [replacement] - The string to be used as a replacement.\n * @throws {TypeError} If string is null or undefined or not coercible.\n * @throws {TypeError} If replacement is not coercible.\n * @returns {string} The new string with the comments replaced.\n */\nexport default function replaceComments(string, ...replacement) {\n  return _replace(requireCoercibleToString(string), STRIP_COMMENTS, replacement.length ? _toString(replacement[0]) : '');\n}\n"],"file":"replaceComments.js"}