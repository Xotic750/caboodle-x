{"version":3,"sources":["../../src/toPrimitive.js"],"names":["isDate","isSymbol","_call","isPrimitive","isSymbolSupported","_isFunction","requireObjectCoercible","isNil","isUndefined","symToPrimitive","Symbol","toPrimitive","symValueOf","prototype","valueOf","toStringOrder","toNumberOrder","orderLength","ordinaryToPrimitive","_ordinaryToPrimitive","O","hint","TypeError","methodNames","method","result","i","getMethod","_getMethod","P","func","input","String","Number","exoticToPrim"],"mappings":"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","sourcesContent":["/**\n * @file Converts a JavaScript object to a primitive value.\n * @copyright Copyright (c) 2018-present, Graham Fairweather\n * @module toNumber\n */\n\nimport isDate from 'is-date-object';\nimport isSymbol from 'is-symbol';\nimport _call from './.internal/_call';\nimport isPrimitive from './isPrimitive';\nimport isSymbolSupported from './isSymbolSupported';\nimport _isFunction from './.internal/_isFunction';\nimport requireObjectCoercible from './requireObjectCoercible';\nimport isNil from './isNil';\nimport isUndefined from './isUndefined';\n\n/* eslint-disable-next-line compat/compat */\nconst symToPrimitive = isSymbolSupported && Symbol.toPrimitive;\n/* eslint-disable-next-line compat/compat */\nconst symValueOf = isSymbolSupported && Symbol.prototype.valueOf;\nconst toStringOrder = ['toString', 'valueOf'];\nconst toNumberOrder = ['valueOf', 'toString'];\nconst orderLength = 2;\n\nconst ordinaryToPrimitive = function _ordinaryToPrimitive(O, hint) {\n  requireObjectCoercible(O);\n\n  if (hint !== 'number' && hint !== 'string') {\n    throw new TypeError('hint must be \"string\" or \"number\"');\n  }\n\n  const methodNames = hint === 'string' ? toStringOrder : toNumberOrder;\n  let method;\n  let result;\n  for (let i = 0; i < orderLength; i += 1) {\n    method = O[methodNames[i]];\n\n    if (_isFunction(method)) {\n      result = _call(method, O);\n\n      if (isPrimitive(result)) {\n        return result;\n      }\n    }\n  }\n\n  throw new TypeError('No default value');\n};\n\nconst getMethod = function _getMethod(O, P) {\n  const func = O[P];\n\n  if (!isNil(func)) {\n    if (!_isFunction(func)) {\n      throw new TypeError(`${func} returned for property ${P} of object ${O} is not a function`);\n    }\n\n    return func;\n  }\n\n  /* eslint-disable-next-line no-void */\n  return void 0;\n};\n\n// http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive\n\n/**\n * This method converts a JavaScript object to a primitive value.\n * Note: When toPrimitive is called with no hint, then it generally behaves as\n * if the hint were Number. However, objects may over-ride this behaviour by\n * defining a @@toPrimitive method. Of the objects defined in this specification\n * only Date objects (see 20.3.4.45) and Symbol objects (see 19.4.3.4) over-ride\n * the default ToPrimitive behaviour. Date objects treat no hint as if the hint\n * were String.\n *\n * @param {*} input - The input to convert.\n * @param {constructor} [preferredType] - The preferred type (String or Number).\n * @throws {TypeError} If unable to convert input to a primitive.\n * @returns {string|number} The converted input as a primitive.\n */\nexport default function toPrimitive(input, ...preferredType) {\n  if (isPrimitive(input)) {\n    return input;\n  }\n\n  let hint = 'default';\n\n  if (preferredType.length) {\n    if (preferredType[0] === String) {\n      hint = 'string';\n    } else if (preferredType[0] === Number) {\n      hint = 'number';\n    }\n  }\n\n  let exoticToPrim;\n\n  if (isSymbolSupported) {\n    if (symToPrimitive) {\n      exoticToPrim = getMethod(input, symToPrimitive);\n    } else if (isSymbol(input)) {\n      exoticToPrim = symValueOf;\n    }\n  }\n\n  if (!isUndefined(exoticToPrim)) {\n    const result = _call(exoticToPrim, input, hint);\n\n    if (isPrimitive(result)) {\n      return result;\n    }\n\n    throw new TypeError('unable to convert exotic object to primitive');\n  }\n\n  if (hint === 'default' && (isDate(input) || isSymbol(input))) {\n    hint = 'string';\n  }\n\n  return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);\n}\n"],"file":"toPrimitive.js"}