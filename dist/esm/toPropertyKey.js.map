{"version":3,"sources":["../../src/toPropertyKey.js"],"names":["isSymbolSupported","isSymbolType","toPrimitive","_toString","toPropertyKey","argument","key","String"],"mappings":"AAAA;;;;;AAMA,OAAOA,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AAEA;;;;;;;;AAOA,eAAe,SAASC,aAAT,CAAuBC,QAAvB,EAAiC;AAC9C,MAAMC,GAAG,GAAGJ,WAAW,CAACG,QAAD,EAAWE,MAAX,CAAvB;AAEA,SAAOP,iBAAiB,IAAIC,YAAY,CAACK,GAAD,CAAjC,GAAyCA,GAAzC,GAA+CH,SAAS,CAACG,GAAD,CAA/D;AACD","sourcesContent":["/**\n * @file Converts argument to a value that can be used as a property key.\n * @copyright Copyright (c) 2018-present, Graham Fairweather\n * @module toPropertyKey\n */\n\nimport isSymbolSupported from './isSymbolSupported';\nimport isSymbolType from './isSymbolType';\nimport toPrimitive from './toPrimitive';\nimport _toString from './.internal/_toString';\n\n/**\n * This method Converts argument to a value that can be used as a property key.\n *\n * @param {*} argument - The argument to convert to a property key.\n * @throws {TypeError} If argument is not a symbol and is not coercible to a string.\n * @returns {string|Symbol} The converted argument.\n */\nexport default function toPropertyKey(argument) {\n  const key = toPrimitive(argument, String);\n\n  return isSymbolSupported && isSymbolType(key) ? key : _toString(key);\n}\n"],"file":"toPropertyKey.js"}