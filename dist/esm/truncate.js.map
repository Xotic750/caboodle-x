{"version":3,"sources":["../../src/truncate.js"],"names":["isRegExp","isUndefined","toWholeNumber","_toString","isObjectLike","_hasOwnProperty","_exec","_join","_stringLastIndexOf","_match","_search","_slice","_stringSlice","_stringIndexOf","_RegExp","_test","G_FLAG","matchFlags","rsAstralRange","rsComboMarksRange","rsComboSymbolsRange","rsVarRange","rsAstral","rsCombo","rsFitz","rsModifier","rsNonAstral","rsRegional","rsSurrPair","rsZWJ","reOptMod","rsOptVar","rsOptJoin","rsSeq","rsSymbol","reComplexSymbol","reHasComplexSymbol","hasComplexSymbol","_hasComplexSymbol","string","stringSize","_stringSize","length","lastIndex","result","truncate","options","str","omission","separator","strLength","matchSymbols","end","substr","global","source","newEnd","match","index"],"mappings":"AAAA;;;;;AAMA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,SAAP,MAAsB,uBAAtB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,YAAP,MAAyB,0BAAzB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;AACA,OAAOC,OAAP,MAAoB,qBAApB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AAEA,IAAMC,MAAM,GAAG,GAAf;AACA;;AACA,IAAMC,UAAU,GAAG,MAAnB;AAEA;;AACA,IAAMC,aAAa,GAAG,iBAAtB;AACA,IAAMC,iBAAiB,GAAG,gCAA1B;AACA,IAAMC,mBAAmB,GAAG,iBAA5B;AACA,IAAMC,UAAU,GAAG,gBAAnB;AAEA;;AACA,IAAMC,QAAQ,cAAOJ,aAAP,MAAd;AACA,IAAMK,OAAO,cAAOJ,iBAAP,SAA2BC,mBAA3B,MAAb;AACA,IAAMI,MAAM,GAAG,0BAAf;AACA,IAAMC,UAAU,gBAASF,OAAT,cAAoBC,MAApB,MAAhB;AACA,IAAME,WAAW,eAAQR,aAAR,MAAjB;AACA,IAAMS,UAAU,GAAG,iCAAnB;AACA,IAAMC,UAAU,GAAG,oCAAnB;AACA,IAAMC,KAAK,GAAG,SAAd;AAEA;;AACA,IAAMC,QAAQ,aAAML,UAAN,MAAd;AACA,IAAMM,QAAQ,cAAOV,UAAP,OAAd;AACA,IAAMW,SAAS,gBAASH,KAAT,gBAAoBtB,KAAK,CAAC,CAACmB,WAAD,EAAcC,UAAd,EAA0BC,UAA1B,CAAD,EAAwC,GAAxC,CAAzB,cAAyEG,QAAzE,SAAoFD,QAApF,OAAf;AAEA,IAAMG,KAAK,GAAGF,QAAQ,GAAGD,QAAX,GAAsBE,SAApC;AACA,IAAME,QAAQ,gBAAS3B,KAAK,CAAC,WAAImB,WAAW,GAAGH,OAAlB,QAA8BA,OAA9B,EAAuCI,UAAvC,EAAmDC,UAAnD,EAA+DN,QAA/D,CAAD,EAA2E,GAA3E,CAAd,MAAd;AAEA;;;;;AAIA,IAAMa,eAAe,GAAG,IAAIrB,OAAJ,WAAeU,MAAf,gBAA2BA,MAA3B,eAAsCU,QAAtC,SAAiDD,KAAjD,GAA0DjB,MAA1D,CAAxB;AAEA;;;;;AAIA,IAAMoB,kBAAkB,GAAG,IAAItB,OAAJ,YAAgBe,KAAhB,SAAwBX,aAAxB,SAAwCC,iBAAxC,SAA4DC,mBAA5D,SAAkFC,UAAlF,OAA3B;;AACA,IAAMgB,gBAAgB,GAAG,SAASC,iBAAT,CAA2BC,MAA3B,EAAmC;AAC1D,SAAOxB,KAAK,CAACqB,kBAAD,EAAqBG,MAArB,CAAZ;AACD,CAFD;AAIA;;;;;;;;;AAOA,IAAMC,UAAU,GAAG,SAASC,WAAT,CAAqBF,MAArB,EAA6B;AAC9C,MAAI,CAACA,MAAD,IAAW,CAACF,gBAAgB,CAACE,MAAD,CAAhC,EAA0C;AACxC,WAAOA,MAAM,CAACG,MAAd;AACD;;AAEDP,EAAAA,eAAe,CAACQ,SAAhB,GAA4B,CAA5B;AAEA,MAAIC,MAAM,GAAG,CAAb;;AACA,SAAO7B,KAAK,CAACoB,eAAD,EAAkBI,MAAlB,CAAZ,EAAuC;AACrCK,IAAAA,MAAM,IAAI,CAAV;AACD;;AAED,SAAOA,MAAP;AACD,CAbD;AAeA;;;;;;;;;;;;;;;;AAcA,eAAe,SAASC,QAAT,CAAkBN,MAAlB,EAA0BO,OAA1B,EAAmC;AAChD,MAAMC,GAAG,GAAG5C,SAAS,CAACoC,MAAD,CAArB;;AACA,MAAIG,MAAM,GAAG,EAAb;AACA,MAAIM,QAAQ,GAAG,KAAf;AACA,MAAIC,SAAJ;;AAEA,MAAI7C,YAAY,CAAC0C,OAAD,CAAhB,EAA2B;AACzB,QAAIzC,eAAe,CAACyC,OAAD,EAAU,WAAV,CAAnB,EAA2C;AACzCG,MAAAA,SAAS,GAAGjD,QAAQ,CAAC8C,OAAO,CAACG,SAAT,CAAR,GAA8BH,OAAO,CAACG,SAAtC,GAAkD9C,SAAS,CAAC2C,OAAO,CAACG,SAAT,CAAvE;AACD;;AAED,QAAI5C,eAAe,CAACyC,OAAD,EAAU,QAAV,CAAnB,EAAwC;AACtCJ,MAAAA,MAAM,GAAGxC,aAAa,CAAC4C,OAAO,CAACJ,MAAT,CAAtB;AACD;;AAED,QAAIrC,eAAe,CAACyC,OAAD,EAAU,UAAV,CAAnB,EAA0C;AACxCE,MAAAA,QAAQ,GAAG7C,SAAS,CAAC2C,OAAO,CAACE,QAAT,CAApB;AACD;AACF;;AAED,MAAIE,SAAS,GAAGH,GAAG,CAACL,MAApB;AACA,MAAIS,YAAJ;;AAEA,MAAId,gBAAgB,CAACU,GAAD,CAApB,EAA2B;AACzBI,IAAAA,YAAY,GAAG1C,MAAM,CAACsC,GAAD,EAAMZ,eAAN,CAArB;AACAe,IAAAA,SAAS,GAAGC,YAAY,CAACT,MAAzB;AACD;;AAED,MAAIA,MAAM,IAAIQ,SAAd,EAAyB;AACvB,WAAOH,GAAP;AACD;;AAED,MAAIK,GAAG,GAAGV,MAAM,GAAGF,UAAU,CAACQ,QAAD,CAA7B;;AAEA,MAAII,GAAG,GAAG,CAAV,EAAa;AACX,WAAOJ,QAAP;AACD;;AAED,MAAIJ,MAAM,GAAGO,YAAY,GAAG5C,KAAK,CAACI,MAAM,CAACwC,YAAD,EAAe,CAAf,EAAkBC,GAAlB,CAAP,EAA+B,EAA/B,CAAR,GAA6CxC,YAAY,CAACmC,GAAD,EAAM,CAAN,EAASK,GAAT,CAAlF;;AAEA,MAAInD,WAAW,CAACgD,SAAD,CAAf,EAA4B;AAC1B,WAAOL,MAAM,GAAGI,QAAhB;AACD;;AAED,MAAIG,YAAJ,EAAkB;AAChBC,IAAAA,GAAG,IAAIR,MAAM,CAACF,MAAP,GAAgBU,GAAvB;AACD;;AAED,MAAIpD,QAAQ,CAACiD,SAAD,CAAZ,EAAyB;AACvB,QAAIvC,OAAO,CAACE,YAAY,CAACmC,GAAD,EAAMK,GAAN,CAAb,EAAyBH,SAAzB,CAAX,EAAgD;AAC9C,UAAMI,MAAM,GAAGT,MAAf;;AAEA,UAAI,CAACK,SAAS,CAACK,MAAf,EAAuB;AACrBL,QAAAA,SAAS,GAAG,IAAInC,OAAJ,CAAYmC,SAAS,CAACM,MAAtB,EAA8BpD,SAAS,CAACG,KAAK,CAACW,UAAD,EAAagC,SAAb,CAAN,CAAT,GAA0CjC,MAAxE,CAAZ;AACD;;AAEDiC,MAAAA,SAAS,CAACN,SAAV,GAAsB,CAAtB;AACA,UAAIa,MAAJ;;AACA,UAAIC,KAAK,GAAGnD,KAAK,CAAC2C,SAAD,EAAYI,MAAZ,CAAjB;;AACA,aAAOI,KAAP,EAAc;AACZD,QAAAA,MAAM,GAAGC,KAAK,CAACC,KAAf;AACAD,QAAAA,KAAK,GAAGnD,KAAK,CAAC2C,SAAD,EAAYI,MAAZ,CAAb;AACD;;AAEDT,MAAAA,MAAM,GAAGhC,YAAY,CAACgC,MAAD,EAAS,CAAT,EAAY3C,WAAW,CAACuD,MAAD,CAAX,GAAsBJ,GAAtB,GAA4BI,MAAxC,CAArB;AACD;AACF,GAlBD,MAkBO,IAAI3C,cAAc,CAACkC,GAAD,EAAME,SAAN,EAAiBG,GAAjB,CAAd,KAAwCA,GAA5C,EAAiD;AACtD,QAAMM,KAAK,GAAGlD,kBAAkB,CAACoC,MAAD,EAASK,SAAT,CAAhC;;AAEA,QAAIS,KAAK,GAAG,CAAC,CAAb,EAAgB;AACdd,MAAAA,MAAM,GAAGhC,YAAY,CAACgC,MAAD,EAAS,CAAT,EAAYc,KAAZ,CAArB;AACD;AACF;;AAED,SAAOd,MAAM,GAAGI,QAAhB;AACD","sourcesContent":["/**\n * @file Truncate a string to a maximum specified length.\n * @copyright Copyright (c) 2018-present, Graham Fairweather\n * @module truncate\n */\n\nimport isRegExp from './isRegex';\nimport isUndefined from './isUndefined';\nimport toWholeNumber from './toWholeNumber';\nimport _toString from './.internal/_toString';\nimport isObjectLike from './isObjectLike';\nimport _hasOwnProperty from './.internal/_hasOwnProperty';\nimport _exec from './.internal/_exec';\nimport _join from './.internal/_join';\nimport _stringLastIndexOf from './.internal/_stringLastIndexOf';\nimport _match from './.internal/_match';\nimport _search from './.internal/_search';\nimport _slice from './.internal/_slice';\nimport _stringSlice from './.internal/_stringSlice';\nimport _stringIndexOf from './.internal/_stringIndexOf';\nimport _RegExp from './.internal/_RegExp';\nimport _test from './.internal/_test';\n\nconst G_FLAG = 'g';\n/* Used to match `RegExp` flags from their coerced string values. */\nconst matchFlags = /\\w*$/;\n\n/* Used to compose unicode character classes. */\nconst rsAstralRange = '\\\\ud800-\\\\udfff';\nconst rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23';\nconst rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0';\nconst rsVarRange = '\\\\ufe0e\\\\ufe0f';\n\n/* Used to compose unicode capture groups. */\nconst rsAstral = `[${rsAstralRange}]`;\nconst rsCombo = `[${rsComboMarksRange}${rsComboSymbolsRange}]`;\nconst rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]';\nconst rsModifier = `(?:${rsCombo}|${rsFitz})`;\nconst rsNonAstral = `[^${rsAstralRange}]`;\nconst rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}';\nconst rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]';\nconst rsZWJ = '\\\\u200d';\n\n/* Used to compose unicode regexes. */\nconst reOptMod = `${rsModifier}?`;\nconst rsOptVar = `[${rsVarRange}]?`;\nconst rsOptJoin = `(?:${rsZWJ}(?:${_join([rsNonAstral, rsRegional, rsSurrPair], '|')})${rsOptVar}${reOptMod})*`;\n\nconst rsSeq = rsOptVar + reOptMod + rsOptJoin;\nconst rsSymbol = `(?:${_join([`${rsNonAstral + rsCombo}?`, rsCombo, rsRegional, rsSurrPair, rsAstral], '|')})`;\n\n/*\n * Used to match string symbols\n * @see https://mathiasbynens.be/notes/javascript-unicode\n */\nconst reComplexSymbol = new _RegExp(`${rsFitz}(?=${rsFitz})|${rsSymbol}${rsSeq}`, G_FLAG);\n\n/*\n * Used to detect strings with [zero-width joiners or code points from\n * the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/).\n */\nconst reHasComplexSymbol = new _RegExp(`[${rsZWJ}${rsAstralRange}${rsComboMarksRange}${rsComboSymbolsRange}${rsVarRange}]`);\nconst hasComplexSymbol = function _hasComplexSymbol(string) {\n  return _test(reHasComplexSymbol, string);\n};\n\n/**\n * Gets the number of symbols in `string`.\n *\n * @private\n * @param {string} string - The string to inspect.\n * @returns {number} Returns the string size.\n */\nconst stringSize = function _stringSize(string) {\n  if (!string || !hasComplexSymbol(string)) {\n    return string.length;\n  }\n\n  reComplexSymbol.lastIndex = 0;\n\n  let result = 0;\n  while (_test(reComplexSymbol, string)) {\n    result += 1;\n  }\n\n  return result;\n};\n\n/**\n * Truncates `string` if it's longer than the given maximum string length.\n * The last characters of the truncated string are replaced with the omission\n * string which defaults to \"...\".\n *\n * @param {string} string - The string to truncate.\n * @param {object} [options] - The options object.\n * @param {number} [options.length=30] - The maximum string length.\n * @param {string} [options.omission='...'] - The string to indicate text\n * is omitted.\n * @param {RegExp|string} [options.separator] - The separator pattern to\n * truncate to.\n * @returns {string} Returns the truncated string.\n */\nexport default function truncate(string, options) {\n  const str = _toString(string);\n  let length = 30;\n  let omission = '...';\n  let separator;\n\n  if (isObjectLike(options)) {\n    if (_hasOwnProperty(options, 'separator')) {\n      separator = isRegExp(options.separator) ? options.separator : _toString(options.separator);\n    }\n\n    if (_hasOwnProperty(options, 'length')) {\n      length = toWholeNumber(options.length);\n    }\n\n    if (_hasOwnProperty(options, 'omission')) {\n      omission = _toString(options.omission);\n    }\n  }\n\n  let strLength = str.length;\n  let matchSymbols;\n\n  if (hasComplexSymbol(str)) {\n    matchSymbols = _match(str, reComplexSymbol);\n    strLength = matchSymbols.length;\n  }\n\n  if (length >= strLength) {\n    return str;\n  }\n\n  let end = length - stringSize(omission);\n\n  if (end < 1) {\n    return omission;\n  }\n\n  let result = matchSymbols ? _join(_slice(matchSymbols, 0, end), '') : _stringSlice(str, 0, end);\n\n  if (isUndefined(separator)) {\n    return result + omission;\n  }\n\n  if (matchSymbols) {\n    end += result.length - end;\n  }\n\n  if (isRegExp(separator)) {\n    if (_search(_stringSlice(str, end), separator)) {\n      const substr = result;\n\n      if (!separator.global) {\n        separator = new _RegExp(separator.source, _toString(_exec(matchFlags, separator)) + G_FLAG);\n      }\n\n      separator.lastIndex = 0;\n      let newEnd;\n      let match = _exec(separator, substr);\n      while (match) {\n        newEnd = match.index;\n        match = _exec(separator, substr);\n      }\n\n      result = _stringSlice(result, 0, isUndefined(newEnd) ? end : newEnd);\n    }\n  } else if (_stringIndexOf(str, separator, end) !== end) {\n    const index = _stringLastIndexOf(result, separator);\n\n    if (index > -1) {\n      result = _stringSlice(result, 0, index);\n    }\n  }\n\n  return result + omission;\n}\n"],"file":"truncate.js"}